bestfit <- fit
bestK <- K
}
}
bestfit <- list(aicc=Inf)
for(K in seq(10)) {
fit <- auto.arima(primary_sales.specfic.store1$x, xreg=fourier(primary_sales.specfic.store1$x, K=K),
seasonal=FALSE)
if(fit[["aicc"]] < bestfit[["aicc"]]) {
bestfit <- fit
bestK <- K
}
}
bestfit <- list(aicc=Inf)
for(K in seq(2)) {
fit <- auto.arima(primary_sales.specfic.store1$x, xreg=fourier(primary_sales.specfic.store1$x, K=K),
seasonal=FALSE)
if(fit[["aicc"]] < bestfit[["aicc"]]) {
bestfit <- fit
bestK <- K
}
}
View(primary_sales.specfic.store1)
primary_sales.specfic.store1$x %>%
tsclean() %>%
ets() %>%
forecast(nnetar,h=50) %>%
autoplot()
primary_sales.specfic.store1$x %>%
tsclean() %>%
ets() %>%
forecast(nnetar(),h=50) %>%
autoplot()
primary_sales.specfic.store1$x %>%
tsclean() %>%
ets() %>%
forecast(nnetar(primary_sales.specfic.store1),h=50) %>%
autoplot()
primary_sales.specfic.store1$x %>%
tsclean() %>%
ets() %>%
forecast(h=50) %>%
autoplot()
primary_sales.specfic.store1$x %>%
tsclean() %>%
ets() %>%
forecast(h=10) %>%
autoplot()
primary_sales.specfic.store1$x %>%
tsclean() %>%
ets() %>%
forecast(h=1) %>%
autoplot()
primary_sales.specfic.store1$x %>%
tsclean() %>%
ets() %>%
forecast(h=5) %>%
autoplot()
primary_sales.specfic.store1$x %>%
tsclean()
primary_sales.specfic.store1$x %>%
tsclean() %>%
ets()
library(fpp)
install.packages('fpp')
library('fpp')       #Introduce new features for forceast
tsoutliers(primary_sales.specfic.store1$x)
#Distribution for Quantity
primary_sales.specfic.store1$x%>%
ggplot(aes(y=Actual,x=""))+
# theme_minimal()+
geom_boxplot(width=0.5,fill="white")+
geom_jitter(width = 0.1,size=1)+
labs(y="Number of Vehicles",x="")
#Distribution for Quantity
primary_sales.specfic.store1 <-
as.data.frame(primary_sales.specfic.store1)
View(primary_sales.specfic.store1)
View(primary_sales.specfic.store1)
primary_sales.specfic.store1$x%>%
ggplot(aes(y=Actual,x=""))+
# theme_minimal()+
geom_boxplot(width=0.5,fill="white")+
geom_jitter(width = 0.1,size=1)+
labs(y="Number of Vehicles",x="")
primary_sales.specfic.store1%>%
ggplot(aes(y=Actual,x=""))+
# theme_minimal()+
geom_boxplot(width=0.5,fill="white")+
geom_jitter(width = 0.1,size=1)+
labs(y="Number of Vehicles",x="")
primary_sales.specfic.store1%>%
ggplot(aes(y=x,x=""))+
# theme_minimal()+
geom_boxplot(width=0.5,fill="white")+
geom_jitter(width = 0.1,size=1)+
labs(y="Number of Vehicles",x="")
View(primary_sales.specfic.store1)
library('ggplot2') # visualization
library('ggthemes') # visualization
library('scales') # visualization
library('grid') # visualisation
library('gridExtra') # visualisation
library('corrplot') # visualisation
library('ggrepel') # visualisation
library('RColorBrewer') # visualisation
library('data.table') # data manipulation
library('dplyr') # data manipulation
library('readr') # data input
library('tibble') # data wrangling
library('tidyr') # data wrangling
library('lazyeval') # data wrangling
library('broom') # data wrangling
library('stringr') # string manipulation
library('purrr') # string manipulation
library('forcats') # factor manipulation
library('lubridate') # date and time
library('forecast') # time series analysis
library('prophet') # time series analysis
library('fpp')       #Introduce new features for forceast
#Read the primary and secondary transaction
secondary_sales <- read.csv("WC_DS_Ex1_Sec_Sales.csv")
primary_sales <- read.csv("WC_DS_Ex1_Pri_Sales.csv")
#Glimpse of primary and secondary sales
glimpse(secondary_sales)
glimpse(primary_sales)
#Find the number of missing values in primary and secondary sales
sum(is.na(secondary_sales))/(ncol(secondary_sales)*nrow(secondary_sales))
sum(is.na(primary_sales))/(ncol(primary_sales)*nrow(primary_sales))
#data transformation and helper functions
primary_sales$Date <- as.Date(primary_sales$Date)
secondary_sales$Date <- as.Date(secondary_sales$Date)
#Start working with the secondary sales data
#First select only specfic column
#date , store_code,Qty
primary_sales.specfic <- primary_sales[,c('Date','Qty','Store_Code')]
primary_sales.specfic <-
primary_sales.specfic[ order(primary_sales.specfic$Date , decreasing = FALSE ),]
#Now select data for each store specificially
#Remove the extra column Store1
#Now resample it by date
primary_sales.specfic.store1 <-
primary_sales.specfic[which(primary_sales.specfic$Store_Code=='Store1'),]
primary_sales.specfic.store1 <-
primary_sales.specfic.store1[,c('Date','Qty')]
#Broup by function for converting into day data
primary_sales.specfic.store1 <-
aggregate(primary_sales.specfic.store1$Qty, by=list(Date=primary_sales.specfic.store1$Date), FUN=sum)
#plot.ts(primary_sales.specfic.store1$x)
ggplot(primary_sales.specfic.store1, aes(Date, x)) + geom_line() +
xlab("") + ylab("Sales Quantity")
#Outlier treatment - Store1
tsoutliers(primary_sales.specfic.store1$x)
#Check the specfic values over that region
primary_sales.specfic.store1[12:18,]
#Outlier treatment - Store1
tsoutliers(primary_sales.specfic.store1$x)
primary_sales.specfic.store1$x %>%
tsclean() %>%
ets() %>%
forecast(h=5) %>%
autoplot()
#Outlier treatment - Store1
temp <-
tsoutliers(primary_sales.specfic.store1$x)
View(temp)
View(temp)
primary_sales.specfic.store1%>%
drop_na()%>%
summarise(`2.5th`=quantile(Actual,probs = 0.025),
`5th`=quantile(Actual,probs = 0.05),
`50th`=quantile(Actual,probs = 0.5),
`95th`=quantile(Actual,probs = 0.95),
`97.5th`=quantile(Actual,probs = 0.975),
Average=mean(Actual),
StandardDeviation=sd(Actual)
)
primary_sales.specfic.store1%>%
drop_na()%>%
summarise(`2.5th`=quantile(x,probs = 0.025),
`5th`=quantile(x,probs = 0.05),
`50th`=quantile(x,probs = 0.5),
`95th`=quantile(x,probs = 0.95),
`97.5th`=quantile(x,probs = 0.975),
Average=mean(x),
StandardDeviation=sd(x)
)
mycolors=viridis_pal(option = "D")(4)
p<-primary_sales.specfic.store1%>%
drop_na()%>%
ggplot(aes(y=x,x=Date))+
# theme_minimal()+
geom_point(alpha = 0.5, color = palette_light()[[1]], shape=20,size=2)+
geom_line()+
labs(y="Number of Vehicles",x="")
#Interquartile Range= Q3-Q1
IQR<-quantile(modelseries,probs = c(0.25, 0.75))
Data1<-primary_sales.specfic.store1[ primary_sales.specfic.store1["x"]>IQR[2],]
Data2<-primary_sales.specfic.store1[primary_sales.specfic.store1["xl"]<IQR[1] ,]
Data3<-rbind.data.frame(Data1,Data2)%>%drop_na()
p+geom_point(aes(y=x,x=Date,color="Above or below IQR"),size=2,data = Data3,shape=1)+
theme(
legend.position="top",
legend.direction="horizontal",
legend.title = element_text("Above or below IQR"), # remove element_blank() x axis ticks and labels
text=element_text(size=8,  family="Comic Sans MS"),
#axis.ticks.x = element_blank(),
#axis.text.x = element_blank(), #remove x-qxis text
#axis.title.x = element_blank(),
legend.text = element_text(size = 7),# legend title size
#legend.text = element_blank(),# remove legend text
plot.title = element_text(hjust = 0.5), #position legend in the middle
axis.text.x = element_text(angle = 30, hjust = 1)
)+
labs(x="Time",fill="",title="Weekly Vehicles Recorded")+
#scale_x_date(labels = date_format("%b-%Y"))
(scale_x_date(breaks=date_breaks("2 month"),
labels=date_format("%m  %y")))
mycolors=viridis_pal(option = "D")(4)
p<-primary_sales.specfic.store1%>%
drop_na()%>%
ggplot(aes(y=x,x=Date))+
# theme_minimal()+
geom_point(alpha = 0.5, color = palette_light()[[1]], shape=20,size=2)+
geom_line()+
labs(y="Number of Vehicles",x="")
#Interquartile Range= Q3-Q1
IQR<-quantile(modelseries,probs = c(0.25, 0.75))
Data1<-primary_sales.specfic.store1[ primary_sales.specfic.store1["x"]>IQR[2],]
Data2<-primary_sales.specfic.store1[primary_sales.specfic.store1["xl"]<IQR[1] ,]
Data3<-rbind.data.frame(Data1,Data2)%>%drop_na()
p+geom_point(aes(y=x,x=Date,color="Above or below IQR"),size=2,data = Data3,shape=1)+
theme(
legend.position="top",
legend.direction="horizontal",
legend.title = element_text("Above or below IQR"), # remove element_blank() x axis ticks and labels
text=element_text(size=8,  family="Comic Sans MS"),
#axis.ticks.x = element_blank(),
#axis.text.x = element_blank(), #remove x-qxis text
#axis.title.x = element_blank(),
legend.text = element_text(size = 7),# legend title size
#legend.text = element_blank(),# remove legend text
plot.title = element_text(hjust = 0.5), #position legend in the middle
axis.text.x = element_text(angle = 30, hjust = 1)
)+
labs(x="Time",fill="",title="Weekly Vehicles Recorded")+
#scale_x_date(labels = date_format("%b-%Y"))
(scale_x_date(breaks=date_breaks("2 month"),
labels=date_format("%m  %y")))
mycolors=viridis_pal(option = "D")(4)
p <-primary_sales.specfic.store1%>%
drop_na()%>%
ggplot(aes(y=x,x=Date))+
# theme_minimal()+
geom_point(alpha = 0.5, color = palette_light()[[1]], shape=20,size=2)+
geom_line()+
labs(y="Number of Vehicles",x="")
p <-primary_sales.specfic.store1%>%
drop_na()%>%
ggplot(aes(y=x,x=Date))+
# theme_minimal()+
geom_point(alpha = 0.5, shape=20,size=2)+
geom_line()+
labs(y="Number of Vehicles",x="")
#Interquartile Range= Q3-Q1
IQR<-quantile(modelseries,probs = c(0.25, 0.75))
Data1<-primary_sales.specfic.store1[ primary_sales.specfic.store1["x"]>IQR[2],]
Data2<-primary_sales.specfic.store1[primary_sales.specfic.store1["xl"]<IQR[1] ,]
Data3<-rbind.data.frame(Data1,Data2)%>%drop_na()
p+geom_point(aes(y=x,x=Date,color="Above or below IQR"),size=2,data = Data3,shape=1)+
theme(
legend.position="top",
legend.direction="horizontal",
legend.title = element_text("Above or below IQR"), # remove element_blank() x axis ticks and labels
text=element_text(size=8,  family="Comic Sans MS"),
#axis.ticks.x = element_blank(),
#axis.text.x = element_blank(), #remove x-qxis text
#axis.title.x = element_blank(),
legend.text = element_text(size = 7),# legend title size
#legend.text = element_blank(),# remove legend text
plot.title = element_text(hjust = 0.5), #position legend in the middle
axis.text.x = element_text(angle = 30, hjust = 1)
)+
labs(x="Time",fill="",title="Weekly Vehicles Recorded")+
#scale_x_date(labels = date_format("%b-%Y"))
(scale_x_date(breaks=date_breaks("2 month"),
labels=date_format("%m  %y")))
#Interquartile Range= Q3-Q1
IQR<-quantile(modelseries,probs = c(0.25, 0.75))
Data1<-primary_sales.specfic.store1[ primary_sales.specfic.store1["x"]>IQR[2],]
Data2<-primary_sales.specfic.store1[primary_sales.specfic.store1["xl"]<IQR[1] ,]
Data3<-rbind.data.frame(Data1,Data2)%>%drop_na()
#Interquartile Range= Q3-Q1
IQR<-quantile(modelseries,probs = c(0.25, 0.75))
Data1<-primary_sales.specfic.store1[ primary_sales.specfic.store1["x"]>IQR[2],]
Data1<-primary_sales.specfic.store1[ primary_sales.specfic.store1["x"]>IQR[2],]
#Interquartile Range= Q3-Q1
IQR<-quantile(modelseries,probs = c(0.25, 0.75))
Data1<-primary_sales.specfic.store1[ primary_sales.specfic.store1["x"]>IQR[2],]
Data2<-primary_sales.specfic.store1[primary_sales.specfic.store1["x"]<IQR[1] ,]
Data3<-rbind.data.frame(Data1,Data2)%>%drop_na()
Data3<-rbind.data.frame(Data1,Data2)%>%drop_na()
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
#Introduce new features for forceast
library(sweep)# Broom tidiers for forecast pkg
library(DT)
library(timekit)
library(tseries)
library(bsts)
library(reticulate)
install.packages('sweep')
install.packages('timekit')
install.packages('tseries')
install.packages('tseries')
install.packages("tseries")
install.packages("bsts")
install.packages("reticulate")
library(timekit)
library(tseries)
library(bsts)
library(reticulate)
library(readxl)
library(readr)
library(plotly)
library(lubridate)
library("rvest")
library(tibble)
library(tidyr)
library(foreach)
library(doParallel)
library(ggjoy)
library(ggfortify)
library(readxl)
library(tidyquant)
install.packages('tidyquant')
install.packages('readxl')
install.packages('readxl')
install.packages("readxl")
install.packages("ggfortify")
install.packages("ggjoy")
install.packages("doParallel")
install.packages("foreach")
install.packages("tidyr")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("tibble")
install.packages("rvest")
install.packages("plotly")
install.packages("plotly")
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
install.packages('tseries')
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
install.packages('DT')
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
install.packages('timekit')
install.packages('bsts')
install.packages('reticulate')
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
install.packages('timekit')
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
install.packages('readxl')
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
library(timetk)
install.packages('timetk')
install.packages("timetk")
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
library(imputeTS)
install.packages('imputeTS')
library(imputeTS)
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
View(primary_sales.specfic.store1)
primary_sales.specfic.store1$x %>%
tsclean() %>%
ets() %>%
forecast(h=5) %>%
autoplot()
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/outlier.R', echo=TRUE)
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/promotions_estimation.r', echo=TRUE)
rm(all)
rm(p,primary_sales,primary_sales.specfic,primary_sales.specfic.store1,temp)
source('C:/Users/Shashi.Raj/Downloads/wyngcommerce/promotions_estimation.r', echo=TRUE)
View(secondary_sales)
secondary_sales%margin <- 1 - (secondary_sales$SP/secondary_sales$MRP)
secondary_sales%margin <- (1 - (secondary_sales$SP/secondary_sales$MRP))
secondary_sales%margin <- (secondary_sales$SP/secondary_sales$MRP)
secondary_sales$margin <- (1 - (secondary_sales$SP/secondary_sales$MRP))
View(secondary_sales)
#data transformation and helper functions
primary_sales$Date <- as.Date(primary_sales$Date)
secondary_sales$Date <- as.Date(secondary_sales$Date)
secondary_sales$margin <- (1 - (secondary_sales$SP/secondary_sales$MRP))
#Calculate the promo between SP and MRP
secondary_sales$promo <- (1 - (secondary_sales$SP/secondary_sales$MRP))
View(secondary_sales)
secondary_sales.specfic <-
secondary_sales[,c('Date','Store_Code','Category','promo')]
View(secondary_sales.specfic)
secondary_sales.specfic <-
secondary_sales[,c('Date','Store_Code','Category','promo')]
secondary_sales.specfic <-
secondary_sales.specfic[ order(secondary_sales.specfic$Date , decreasing = FALSE ),]
View(secondary_sales.specfic)
#Now start calculating promotion for store1
secondary_sales.specfic.store1 <-
secondary_sales.specfic[which(secondary_sales.specfic$Store_Code=='Store1'),]
secondary_sales.specfic.store1 <-
secondary_sales.specfic.store1[,c('Date','Category','promo')]
View(secondary_sales.specfic.store1)
#plot.ts(primary_sales.specfic.store1$x)
ggplot(secondary_sales.specfic.store1, aes(Date, promo)) + geom_line() +
xlab("") + ylab("Sales Quantity")
#plot.ts(primary_sales.specfic.store1$x)
ggplot(secondary_sales.specfic.store1, aes(Date, promo)) + geom_point() +
xlab("") + ylab("Sales Quantity")
View(secondary_sales.specfic)
#plot.ts(primary_sales.specfic.store1$x)
ggplot(secondary_sales.specfic.store1, aes(Date, promo)) +
geom_point(aes(col=Category,size=promo)) +
xlab("") + ylab("Sales Quantity")
#Now start calculating promotion for store1
secondary_sales.specfic.store1 <-
secondary_sales.specfic[which(secondary_sales.specfic$Store_Code=='Store2'),]
secondary_sales.specfic.store1 <-
secondary_sales.specfic.store1[,c('Date','Category','promo')]
#plot.ts(primary_sales.specfic.store1$x)
ggplot(secondary_sales.specfic.store1, aes(Date, promo)) +
geom_point(aes(col=Category,size=promo)) +
xlab("") + ylab("Sales Quantity")
#Now start calculating promotion for store1
secondary_sales.specfic.store1 <-
secondary_sales.specfic[which(secondary_sales.specfic$Store_Code=='Store3'),]
secondary_sales.specfic.store1 <-
secondary_sales.specfic.store1[,c('Date','Category','promo')]
#plot.ts(primary_sales.specfic.store1$x)
ggplot(secondary_sales.specfic.store1, aes(Date, promo)) +
geom_point(aes(col=Category,size=promo)) +
xlab("") + ylab("Sales Quantity")
#plot.ts(primary_sales.specfic.store1$x)
ggplot(secondary_sales.specfic.store1, aes(Date, promo)) +
geom_point(aes(col=Category,size=promo)) +
geom_smooth(method="loess", se=F) +
xlab("") + ylab("Sales Quantity")
#plot.ts(primary_sales.specfic.store1$x)
ggplot(secondary_sales.specfic.store1, aes(Date, promo)) +
geom_point(aes(col=Category,size=promo)) +
geom_smooth(method="loess", se=F) +
geom_encircle(aes(x=Date, y=promo),
data=midwest_select,
color="red",
size=2,
expand=0.08) +
xlab("") + ylab("Sales Quantity")
#plot.ts(primary_sales.specfic.store1$x)
ggplot(secondary_sales.specfic.store1, aes(Date, promo)) +
geom_point(aes(col=Category,size=promo)) +
geom_smooth(method="loess", se=F) +
geom_encircle(aes(x=Date, y=promo),
data=secondary_sales.specfic.store1,
color="red",
size=2,
expand=0.08) +
xlab("") + ylab("Sales Quantity")
#plot.ts(primary_sales.specfic.store1$x)
ggplot(secondary_sales.specfic.store1, aes(Date, promo)) +
geom_point(aes(col=Category,size=promo)) +
geom_smooth(method="loess", se=F) +
xlab("") + ylab("Sales Quantity")
geom_encircle(aes(x=Date, y=promo),
data=secondary_sales.specfic.store1,
color="red",
size=2,
expand=0.08)
#plot.ts(primary_sales.specfic.store1$x)
ggplot(secondary_sales.specfic.store1, aes(Date, promo)) +
geom_point(aes(col=Category,size=promo)) +
geom_smooth(method="loess", se=F) +
xlab("") + ylab("Sales Quantity")
geom_encircle(aes(x=Date, y=promo),
data=secondary_sales.specfic.store1,
color="red",
size=2,
expand=0.08)
#plot.ts(primary_sales.specfic.store1$x)
ggplot(secondary_sales.specfic.store1, aes(Date, promo)) +
geom_point(aes(col=Category,size=promo)) +
geom_smooth(method="loess", se=F) +
xlab("") + ylab("Sales Quantity") +
geom_encircle(aes(x=Date, y=promo),
data=secondary_sales.specfic.store1,
color="red",
size=2,
expand=0.08)
#plot.ts(primary_sales.specfic.store1$x)
ggplot(secondary_sales.specfic.store1, aes(Date, promo)) +
geom_point(aes(col=Category,size=promo)) +
geom_smooth(method="loess", se=F) +
xlab("") + ylab("Sales Quantity") +
geom_encircle(aes(x=Date, y=promo),
data=secondary_sales.specfic.store1,
color="red",
size=2,
expand=0.08)
